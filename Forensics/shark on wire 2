shark on wire 2 - write up

An amazing challenge that I solved with the help of JimChr-R4GN4R (https://github.com/JimChr-R4GN4R)

I downloaded the .pcap file and opened it with Wireshark.
I tried to see if there were any packets sent via HTTP requests so I filtered the stream with the "http.request.method" filter.

Didn't find anything important, so I decided to check the Udp stream.
Typing "udp.stream" as a filter, i found some interesting lines with some Malformed Packets ("udp.stream eq 4" as filter").
Continuing with the udp.stream, we find womething important in the filter "udp.stream eq 7", where if we Follow the Udp Stream
of any line (as in shark on wire 1), we will find what seems like part of a flag: "icoCTF{StaT31355e"

Searching we find the following:
Most interesting i (for "udp.stream eq i")
4: Malformed Packet
6: kfdsalkfsalkico{N0t_a_fLag} [fake flag]
7: icoCTF{StaT31355e [probably part of our flag]
12: C
13: T
14: F
23: _
24:36
25: } [probably the end of our flag]
32: start
49: Malformed Packet
60: end

I tried picoCTF{Stat31355eCTF_36} pretty convinced I had found the flag and.. BOOM! Wrong flag..
I stared at the screen pretty confused at first, but I decided to continue searching.

After some time, I realised that I couldn't progress any further or find anything new, so I texted R4GN4R and asked for his help.
After some time of searching, he told me to filter "ip.src == 10.0.0.80" and "ip.src == 10.0.0.66" to check them.
He suggested that 10.0.0.66 had a packet "start" (udp.stream eq 32) and 10.0.0.80 had "end" (udp.stream eq 60)
So what happened in between?!

He (actually carried me :p and) proposed that the various ports used probably meant something and they could lead to the flag.
So, with a custom script which takes a port in format of [5XXX], pops "5" (left with [XXX]) and turning the remainings into letters
(using ASCII), we were left with:

picoCTF{p1LLf3r3d_data_v1a_st3g0}, which is actually our flag!

An easy way to decrypt the encrypted flag is to run the next series of numbers (3 last digits of ports) as input into CyberChef:
[112 105 99 111 67 84 70 123 112 49 76 76 102 51 114 51 100 95 100 97 116 97 95 118 49 97 95 115 116 51 103 48 125]
and then decrypt from decimal with "Space" as Delimiter.

So it turns out icoCTF{StaT31355e and all the other strings in flag format were actually fake ones, and the real one was hiding in
the decryption of the source ports' 3 last digits.


So the flag is: picoCTF{p1LLf3r3d_data_v1a_st3g0} and the github of R4GN4R is: https://github.com/JimChr-R4GN4R
Thanks mate!
