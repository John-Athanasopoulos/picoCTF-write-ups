rsa-pop-quiz - write up

This was a pretty difficult challenge that I solved without automating the process.
However I found a script for the automation and fixed it, so that you will have the correct answer.
Know that copying the flag from anywhere won't work, as the result depends on the number after
'nc 2019shell1.picoctf.com'. Follow the instructions of the script and you will be fine though!

(original wrong script found here: https://github.com/tcode2k16/picoctf-2019-writeup/blob/master/rsa-pop-quiz/main.py)

The code is the following. Execute it and when asked type the number you see next to 'nc 2019shell1.picoctf.com'
When the code freezes press Ctrl + C and you will be given the flag.

PYTHON3 SCRIPT:

//CodeStart

#!/bin/python3

from pwn import *

context.log_level = 'debug'
port = input("Enter the number next to 'nc 2019shell1.picoctf.com': ")

get = lambda x: [sh.recvuntil('{} : '.format(x)), int(sh.recvline())][1]

sh = remote('2019shell1.picoctf.com', port)

q = get('q')
p = get('p')
sh.sendlineafter(' (Y/N):', 'Y')
sh.sendlineafter('n: ', str(p*q))


p = get('p')
n = get('n')
sh.sendlineafter(' (Y/N):', 'Y')
sh.sendlineafter('q: ', str(n//p))


sh.sendlineafter(' (Y/N):', 'N')


q = get('q')
p = get('p')
sh.sendlineafter(' (Y/N):', 'Y')
sh.sendlineafter('totient(n): ', str((p-1)*(q-1)))


plaintext = get('plaintext')
e = get('e')
n = get('n')
sh.sendlineafter(' (Y/N):', 'Y')
sh.sendlineafter('ciphertext: ', str(pow(plaintext,e,n)))


sh.sendlineafter(' (Y/N):', 'N')


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

q = get('q')
p = get('p')
e = get('e')
sh.sendlineafter(' (Y/N):', 'Y')
sh.sendlineafter('d: ', str(modinv(e, (p-1)*(q-1))))


p = get('p')
ciphertext = get('ciphertext')
e = get('e')
n = get('n')
q = n//p
phi = (q-1)*(p-1)
d = modinv(e, phi)
sh.sendlineafter(' (Y/N):', 'Y')
sh.sendlineafter('plaintext: ', str(pow(ciphertext, d, n)))

plaintext = pow(ciphertext, d, n)

sh.interactive()

plaintext_hex_converted = hex(plaintext).split('x')[-1]
plaintext_from_hex_to_ascii = bytearray.fromhex(plaintext_hex_converted).decode()
print("FLAG: ",plaintext_from_hex_to_ascii)

//CodeEnd



